package "gmlewis/fonts"

import(
  "moonbitlang/core/json"
)

// Values
fn add(Rectangle, Point) -> Rectangle

let all_fonts : Array[String]

fn bbox(PathCmd) -> Rectangle

fn bounds(Rectangle) -> (Double, Double, Double, Double)

fn canon(Rectangle) -> Rectangle

fn clone(Rectangle) -> Rectangle

fn div(Point, Double) -> Point

fn dx(Rectangle) -> Double

fn dy(Rectangle) -> Double

fn empty(Rectangle) -> Bool

fn extend(Rectangle, Point) -> Unit

fn gen_path(Font, String, anchor~ : Anchor = .., y_up~ : Bool = ..) -> Glyph raise FontError

fn gen_paths(Font, Array[String], anchor~ : Anchor = .., y_up~ : Bool = ..) -> Array[Glyph] raise FontError

fn glyph_bbox(String) -> Rectangle raise FontError

fn inset(Rectangle, Double) -> Rectangle

fn intersect(Rectangle, Rectangle) -> Rectangle

fn is_in(Point, Rectangle) -> Bool

fn length(Params) -> Int

fn mul(Point, Double) -> Point

fn op_add(Point, Point) -> Point

fn op_equal(Point, Point) -> Bool

fn op_sub(Point, Point) -> Point

fn overlaps(Rectangle, Rectangle) -> Bool

fn pt(Double, Double) -> Point

fn rect(Double, Double, Double, Double) -> Rectangle

fn size(Rectangle) -> Point

fn sub(Rectangle, Point) -> Rectangle

fn to_glyph(Path, path_cmd_fn? : PathCmdFn) -> Glyph

fn to_string(Point) -> String

fn translate_path(String, Double, Double, invert_y~ : Bool = ..) -> String raise FontError

fn union(Rectangle, Rectangle) -> Rectangle

// Types and methods
pub(all) enum AbsoluteCmd {
  M
  L
  C
  Q
  Z
}
impl Eq for AbsoluteCmd
impl Show for AbsoluteCmd

pub(all) enum Anchor {
  Unchanged
  TopLeft
  TopCenter
  TopRight
  CenterLeft
  Center
  CenterRight
  BaselineLeft
  BaselineCenter
  BaselineRight
  BottomLeft
  BottomCenter
  BottomRight
  RatioXY(Double, Double)
}
impl Eq for Anchor
impl Show for Anchor

type Cmd
impl Eq for Cmd
impl Show for Cmd

pub(all) struct Font {
  id : String
  horiz_adv_x : Double
  units_per_em : Double
  ascent : Double
  descent : Double
  glyphs : Map[String, Glyph]
}
fn Font::gen_path(Self, String, anchor~ : Anchor = .., y_up~ : Bool = ..) -> Glyph raise FontError
fn Font::gen_paths(Self, Array[String], anchor~ : Anchor = .., y_up~ : Bool = ..) -> Array[Glyph] raise FontError
impl Eq for Font
impl Show for Font
impl ToJson for Font
impl @json.FromJson for Font

pub(all) suberror FontError String
impl Eq for FontError
impl Show for FontError

pub(all) enum GerberLP {
  Dark
  Clear
}
impl Eq for GerberLP
impl Show for GerberLP

pub(all) struct Glyph {
  char : String
  horiz_adv_x : Double
  gerber_lp : String
  d : String
  xmin : Double
  ymin : Double
  xmax : Double
  ymax : Double
}
impl Eq for Glyph
impl Show for Glyph
impl ToJson for Glyph
impl @json.FromJson for Glyph

pub(all) struct ParamPair {
  x : Double
  y : Double
}
fn ParamPair::to_string(Self) -> String
impl Eq for ParamPair

type Params
fn Params::length(Self) -> Int
impl Eq for Params
impl Show for Params

pub(all) struct Path {
  char : String
  cmds : Array[PathCmd]
  xmin : Double
  ymin : Double
  xmax : Double
  ymax : Double
}
fn Path::clone(Self) -> Self
fn Path::from_glyph(Glyph, path_cmd_fn? : PathCmdFn) -> Self raise FontError
fn Path::to_glyph(Self, path_cmd_fn? : PathCmdFn) -> Glyph
impl Eq for Path
impl Show for Path

pub(all) struct PathCmd {
  cmd : AbsoluteCmd
  gerber_lp : GerberLP
  params : Array[ParamPair]
}
fn PathCmd::bbox(Self) -> Rectangle
fn PathCmd::clone(Self) -> Self
fn PathCmd::from_svg_cmd(Cmd, GerberLP) -> Self raise FontError
fn PathCmd::to_svg_cmd(Self) -> (Cmd, String)
impl Eq for PathCmd
impl Show for PathCmd

pub(all) type PathCmdFn (Int, PathCmd) -> PathCmd

pub(all) struct Point {
  mut x : Double
  mut y : Double
}
fn Point::div(Self, Double) -> Self
fn Point::is_in(Self, Rectangle) -> Bool
fn Point::mul(Self, Double) -> Self
fn Point::op_add(Self, Self) -> Self
fn Point::op_equal(Self, Self) -> Bool
fn Point::op_sub(Self, Self) -> Self
fn Point::to_string(Self) -> String
impl Eq for Point
impl Show for Point

pub(all) struct Rectangle {
  min : Point
  max : Point
}
fn Rectangle::add(Self, Point) -> Self
fn Rectangle::bounds(Self) -> (Double, Double, Double, Double)
fn Rectangle::canon(Self) -> Self
fn Rectangle::clone(Self) -> Self
fn Rectangle::dx(Self) -> Double
fn Rectangle::dy(Self) -> Double
fn Rectangle::empty(Self) -> Bool
fn Rectangle::extend(Self, Point) -> Unit
fn Rectangle::inset(Self, Double) -> Self
fn Rectangle::intersect(Self, Self) -> Self
fn Rectangle::is_in(Self, Self) -> Bool
fn Rectangle::new() -> Self
fn Rectangle::op_equal(Self, Self) -> Bool
fn Rectangle::overlaps(Self, Self) -> Bool
fn Rectangle::size(Self) -> Point
fn Rectangle::sub(Self, Point) -> Self
fn Rectangle::to_string(Self) -> String
fn Rectangle::union(Self, Self) -> Self
impl Eq for Rectangle
impl Show for Rectangle

// Type aliases

// Traits

